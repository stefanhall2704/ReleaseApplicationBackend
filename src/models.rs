// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use chrono::NaiveDate;
use chrono::NaiveDateTime;
#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ApplicationConnection {
    pub ID: i32,
    pub FromApplicationID: i32,
    pub ToApplicationID: i32,
    pub RequiresCert: bool,
    pub RequiresKey: bool,
    pub RequiresAzureADAuth: bool,
    pub ConnectionType: Option<String>,
    pub DateAdded: Option<NaiveDateTime>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ApplicationNode {
    pub ID: i32,
    pub OctopusID: i32,
    pub ApplicationName: String,
    pub ApplicationType: Option<String>,
    pub IsIncludedInImminentRelease: Option<bool>,
    pub ServerGroupDescription: Option<String>,
    pub DateAdded: Option<NaiveDateTime>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ApplicationTeam {
    pub ID: i32,
    pub Name: String,
    pub IsActive: Option<bool>,
    pub SourceControlTeamID: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ApplicationUser {
    pub ID: i32,
    pub First: String,
    pub Last: String,
    pub ADUsername: String,
    pub Email: String,
    pub PrimaryPhone: Option<String>,
    pub SecondaryPhone: Option<String>,
    pub ApplicationUserRoleID: i32,
    pub IsActive: Option<i32>,
    pub ApplicationTeamID: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ApplicationUserReleaseApproval {
    pub ID: i32,
    pub ApplicationUserID: i32,
    pub ReleaseApprovalTypeID: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ApplicationUserReleaseAvailability {
    pub ID: i32,
    pub ReleaseID: i32,
    pub ApplicationUserID: i32,
    pub SupportAvailability: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ApplicationUserRole {
    pub ID: i32,
    pub Role: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ApplicationUserTeam {
    pub ID: i32,
    pub ApplicationUserID: i32,
    pub ApplicationTeamID: i32,
    pub IsMember: bool,
    pub IsSubscriber: bool,
    pub IsAdmin: bool,
    pub IsDefault: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct AuditReleaseActivityTask {
    pub ID: i32,
    pub ReleaseActivityTaskID: Option<i32>,
    pub Title: Option<String>,
    pub StageCategoryID: Option<i32>,
    pub DeploymentInstructions: Option<String>,
    pub OctopusProjectID: Option<i32>,
    pub TargetEnvironmentID: Option<i32>,
    pub IsHidden: Option<bool>,
    pub StageUserID: Option<i32>,
    pub StageStatusID: Option<i32>,
    pub ProdUserID: Option<i32>,
    pub ProdStatusID: Option<i32>,
    pub StageSortOrder: Option<i32>,
    pub ProdSortOrder: Option<i32>,
    pub ProdCategoryID: Option<i32>,
    pub CanonicalOrder: Option<i32>,
    pub UpdateBy: String,
    pub UpdatedOnDate: NaiveDateTime,
    pub Action: String,
    pub DependentTaskID: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct BuildHistory {
    pub ID: i32,
    pub BuildProjectID: i32,
    pub MetricsDailyCacheID: i32,
    pub Total: i32,
    pub TotalSuccess: i32,
    pub TotalFailed: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct BuildProject {
    pub ID: i32,
    pub Name: String,
    pub OctopusProjectID: Option<i32>,
    pub BuildDefinitionID: Option<i32>,
    pub Path: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Certificate {
    pub ID: i32,
    pub Name: String,
    pub CreatedDate: NaiveDateTime,
    pub ExpirationDate: NaiveDateTime,
    pub Thumbprint: Option<String>,
    pub EnvironmentID: Option<i32>,
    pub LastModifiedDateTime: NaiveDateTime,
    pub OctopusProjectID: Option<i32>,
    pub SubjectCName: Option<String>,
    pub MarkForDeletion: bool,
    pub ReplacementSteps: Option<String>,
    pub SerialNumber: Option<String>,
    pub Source: Option<String>,
    pub WorkItemID: Option<i32>,
    pub PreviousWorkItemIDs: Option<String>,
    pub RequiresDowntime: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct DeploymentHistory {
    pub ID: i32,
    pub OctopusProjectID: i32,
    pub MetricsDailyCacheID: i32,
    pub Total: i32,
    pub TotalSuccess: i32,
    pub TotalFailed: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ERTHistory {
    pub ID: i32,
    pub LogDate: NaiveDate,
    pub ApplicationTeamID: Option<i32>,
    pub StartTime: Option<NaiveDateTime>,
    pub EndTime: Option<NaiveDateTime>,
    pub Status: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ERTProject {
    pub ID: i32,
    pub ERTHistoryID: i32,
    pub OctopusProjectID: i32,
    pub OctopusDeployProjectID: String,
    pub DeploymentID: Option<String>,
    pub Version: Option<String>,
    pub Status: i32,
    pub ApplicationUserID: i32,
    pub Order: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Environment {
    pub ID: i32,
    pub Name: String,
    pub Subscription: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Export {
    pub ID: i32,
    pub Name: String,
    pub StoredProcedureName: String,
    pub Category: String,
    pub IsActive: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct FunctionalTest {
    pub ID: i32,
    pub Name: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct FunctionalTestResult {
    pub ID: i32,
    pub FunctionalTestID: i32,
    pub TotalTestsExecuted: i32,
    pub TotalTestsPassed: i32,
    pub TotalTestsFailed: i32,
    pub ResultFileLocation: String,
    pub EnvironmentID: i32,
    pub OctopusProjectID: i32,
    pub OctopusDeploymentID: Option<String>,
    pub ExecutionResult: String,
    pub ExecutionDate: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct MetricsBug {
    pub ID: i32,
    pub AzureDevOpsID: i32,
    pub Title: String,
    pub State: String,
    pub AreaPath: Option<String>,
    pub IterationID: Option<i32>,
    pub IterationPath: Option<String>,
    pub Priority: Option<String>,
    pub Severity: Option<String>,
    pub CreatedDate: NaiveDateTime,
    pub CreatedByDisplayName: Option<String>,
    pub DiscoveredInEnvironment: Option<String>,
    pub ActivatedDate: Option<NaiveDateTime>,
    pub ActivatedByDisplayName: Option<String>,
    pub AssignedToDisplayName: Option<String>,
    pub ChangedDate: Option<NaiveDateTime>,
    pub ChangedByDisplayName: Option<String>,
    pub ResolvedDate: Option<NaiveDateTime>,
    pub ResolvedByDisplayName: Option<String>,
    pub ClosedDate: Option<NaiveDateTime>,
    pub ClosedByDisplayName: Option<String>,
    pub CommentCount: Option<i32>,
    pub Tags: Option<String>,
    pub RootCause: Option<String>,
    pub FunctionalArea: Option<String>,
    pub FinanciallyRelevant: Option<bool>,
    pub AffectsEnvironmentStability: Option<bool>,
    pub Vendor: Option<String>,
    pub ProdSupportTicketID: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct MetricsDailyCache {
    pub ID: i32,
    pub BuildTotal: i32,
    pub BuildSuccessTotal: i32,
    pub BuildFailureTotal: i32,
    pub BuildSuccessDecimal: f32,
    pub UnitTestTotal: i32,
    pub UnitTestSuccessTotal: i32,
    pub UnitTestFailureTotal: i32,
    pub UnitTestSuccessDecimal: f32,
    pub CodeCoverageAverageDecimal: f32,
    pub DeploymentTotal: i32,
    pub DeploymentSuccessTotal: i32,
    pub DeploymentFailureTotal: i32,
    pub DeploymentSuccessDecimal: f32,
    pub FunctionalTestTotal: i32,
    pub FunctionalTestSuccessTotal: i32,
    pub FunctionalTestFailureTotal: i32,
    pub FunctionalTestSuccessDecimal: f32,
    pub IntegrationTestProjectTotal: i32,
    pub IntegrationTestSuccessTotal: i32,
    pub IntegrationTestFailureTotal: i32,
    pub IntegrationTestSuccessDecimal: f32,
    pub LogDate: NaiveDateTime,
    pub CodeCoverageProjectsTotal: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct MetricsPullRequest {
    pub ID: i32,
    pub AzureDevOpsID: i32,
    pub Title: String,
    pub CreationDate: NaiveDateTime,
    pub CreatedByDisplayName: String,
    pub CreatedByUniqueIDentifier: String,
    pub FirstEngagementDate: Option<NaiveDateTime>,
    pub ApprovalDate: Option<NaiveDateTime>,
    pub ApprovedByDisplayName: Option<String>,
    pub ApprovedByUniqueIDentifier: Option<String>,
    pub ClosedDate: Option<NaiveDateTime>,
    pub ClosedByDisplayName: Option<String>,
    pub ClosedByUniqueIDentifier: Option<String>,
    pub RepositoryName: String,
    pub RepositoryID: String,
    pub Status: String,
    pub SourceBranchName: String,
    pub TargetBranchName: String,
    pub MergeStatus: Option<String>,
    pub MergeID: Option<String>,
    pub NumberOfOriginalCommits: Option<i32>,
    pub NumberOfAdditionalCommits: Option<i32>,
    pub TotalCommits: Option<i32>,
    pub TotalCommentThreadCount: Option<i32>,
    pub CommentThreadsBeforeApproval: Option<i32>,
    pub CommentThreadsAfterApproval: Option<i32>,
    pub TotalCommentCount: Option<i32>,
    pub MostCommentsInSingleThread: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct NotificationQueue {
    pub ID: i32,
    pub Type: String,
    pub From_: String,
    pub To: String,
    pub CC: String,
    pub BCC: String,
    pub Subject: String,
    pub Body: String,
    pub HasBeenSent: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct OctopusProject {
    pub ID: i32,
    pub Name: String,
    pub OctopusProjectID: String,
    pub OctopusProjectGroupID: String,
    pub IsEnabled: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ProjectCodeCoverage {
    pub ID: i32,
    pub BuildProjectID: i32,
    pub CodeCoverageValue: f32,
    pub CodeCoverageDate: NaiveDateTime,
    pub ReleaseNotesPath: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ProjectRollUp {
    pub ID: i32,
    pub Name: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ProjectRollUpOctopusProject {
    pub ID: i32,
    pub ProjectRollUpID: i32,
    pub OctopusProjectID: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct Release {
    pub ID: i32,
    pub Name: String,
    pub ReleaseDate: NaiveDateTime,
    pub IsOffCycle: Option<bool>,
    pub ReleaseStatusID: Option<i32>,
    pub DowntimeNotes: Option<String>,
    pub ReleaseCommitDate: String,
    pub RegressionQueryLink: Option<String>,
    pub Description: Option<String>,
    pub ChangeControlNumber: Option<String>,
    pub TotalWorkItemsTaggedForRelease: Option<i32>,
    pub IsReadyForQa: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivity {
    pub ID: i32,
    pub Title: String,
    pub ReleaseID: Option<i32>,
    pub CreatedBy: Option<String>,
    pub CreatedDate: Option<NaiveDateTime>,
    pub IsCompliant: Option<bool>,
    pub BackOutProcedures: Option<String>,
    pub JustificationAndPriority: Option<String>,
    pub ProductionValidation: Option<String>,
    pub Risk: Option<String>,
    pub RiskLevel: Option<String>,
    pub PriorityLevel: Option<String>,
    pub RequiresDowntime: String,
    pub RequiresPerformanceTesting: String,
    pub ApplicationTeamID: Option<i32>,
    pub LastModifiedBy: Option<String>,
    pub LastModifiedDate: Option<NaiveDateTime>,
    pub ChangeManagementID: Option<String>,
    pub ExceptionReason: Option<String>,
    pub ExceptionGranted: Option<bool>,
    pub JiraWorkItems: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityApproval {
    pub ID: i32,
    pub ReleaseActivityID: i32,
    pub ReleaseApprovalTypeID: Option<i32>,
    pub RiskAssessment: Option<String>,
    pub ApplicationUserID: Option<i32>,
    pub CreatedDate: Option<NaiveDateTime>,
    pub Status: Option<String>,
    pub Comments: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityFeature {
    pub ID: i32,
    pub ReleaseActivityID: i32,
    pub FeatureID: i32,
    pub TeamID: Option<String>,
    pub ParentID: Option<i32>,
    pub ParentTitle: Option<String>,
    pub FeatureTitle: Option<String>,
    pub TargetDate: Option<NaiveDate>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityRelatedApplicationUser {
    pub ID: i32,
    pub ReleaseActivityID: i32,
    pub ApplicationUserID: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityRelatedTask {
    pub ID: i32,
    pub ReleaseActivityID: i32,
    pub ReleaseActivityTaskID: i32,
    pub OctopusProjectSelectedVersion: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityTask {
    pub ID: i32,
    pub Title: Option<String>,
    pub StageCategoryID: Option<i32>,
    pub DeploymentInstructions: Option<String>,
    pub OctopusProjectID: Option<i32>,
    pub TargetEnvironmentID: Option<i32>,
    pub IsHidden: Option<bool>,
    pub StageStatusID: Option<i32>,
    pub ProdUserID: Option<i32>,
    pub StageUserID: Option<i32>,
    pub ProdStatusID: Option<i32>,
    pub StageSortOrder: Option<i32>,
    pub ProdSortOrder: Option<i32>,
    pub ProdCategoryID: Option<i32>,
    pub CanonicalOrder: Option<i32>,
    pub LastModifiedBy: Option<String>,
    pub LastModifiedDateTime: Option<NaiveDateTime>,
    pub DependentTaskID: Option<i32>,
    pub OctopusProjectSelectedVersion: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityTaskAttachment {
    pub ID: String,
    pub ReleaseActivityTaskID: i32,
    pub File: Option<Vec<u8>>,
    pub FileName: Option<String>,
    pub ContentType: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityTaskCategory {
    pub ID: i32,
    pub Category: Option<String>,
    pub SortOrder: Option<i32>,
    pub IsActive: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityTaskMessageQueue {
    pub ID: i32,
    pub IsProcessed: bool,
    pub HasBeenSeen: bool,
    pub HasBeenPeeked: bool,
    pub ApplicationUserID: i32,
    pub ReleaseActivityTaskID: i32,
    pub LastModifiedBy: Option<String>,
    pub LastModifiedDateTime: Option<NaiveDateTime>,
    pub ReleaseEnvironment: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityTaskStatu {
    pub ID: i32,
    pub Status: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseActivityTaskTargetEnvironment {
    pub ID: i32,
    pub TargetEnvironment: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseApproval {
    pub ID: i32,
    pub ReleaseID: i32,
    pub ReleaseApprovalTypeID: i32,
    pub RiskAssessment: Option<String>,
    pub ApplicationUserID: i32,
    pub CreatedDate: Option<NaiveDateTime>,
    pub Status: Option<String>,
    pub Comments: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseApprovalStatistic {
    pub ID: i32,
    pub ReleaseApprovalID: i32,
    pub Comments: Option<String>,
    pub Value: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseApprovalType {
    pub ID: i32,
    pub Name: String,
    pub IsActive: Option<bool>,
    pub DisplayOrder: Option<i32>,
    pub Icon: Option<String>,
    pub Description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseBranchHistory {
    pub ID: i32,
    pub OctopusProjectID: i32,
    pub ReleaseID: i32,
    pub CreatedDate: NaiveDateTime,
    pub CreatedBy: Option<String>,
    pub VersionNumber: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseRelatedApplicationUser {
    pub ID: i32,
    pub ReleaseID: i32,
    pub ApplicationUserID: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseRelatedCategory {
    pub ID: i32,
    pub Category: Option<String>,
    pub ReleaseID: i32,
    pub SortOrder: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ReleaseStatu {
    pub ID: i32,
    pub Status: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct RequestPathway {
    pub ID: i32,
    pub ToApplicationID: Option<i32>,
    pub FromApplicationID: Option<i32>,
    pub ConnectionType: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ResourceCost {
    pub ID: i32,
    pub Subscription: String,
    pub ResourceGroupName: String,
    pub ResourceGroupResourceName: String,
    pub CostDate: Option<NaiveDate>,
    pub Cost: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct ResourceGroupCost {
    pub ID: i32,
    pub Subscription: String,
    pub ResourceGroupName: String,
    pub CostDate: Option<NaiveDate>,
    pub Cost: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct STAR {
    pub ID: i32,
    pub DateCreated: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct STARData {
    pub ID: i32,
    pub StarID: i32,
    pub Record: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct SlottingMigrationLog {
    pub ID: i32,
    pub OctopusProjectID: Option<String>,
    pub ApplicationUserID: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct SystemEventLog {
    pub ID: i32,
    pub Source: String,
    pub Description: String,
    pub OctopusProjectID: Option<String>,
    pub EventDate: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct SystemValue {
    pub ID: i32,
    pub Name: String,
    pub Value: String,
    pub Date: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct UnitTestHistory {
    pub ID: i32,
    pub BuildProjectID: i32,
    pub MetricsDailyCacheID: i32,
    pub Total: i32,
    pub TotalSuccess: i32,
    pub TotalFailed: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ID))]
pub struct VstsFeatureCompliance {
    pub ID: i32,
    pub FeatureID: i32,
    pub ReleaseName: String,
    pub IsCompliant: bool,
    pub NumberNonCompliantChildren: i32,
    pub LastCheckedDate: NaiveDateTime,
}

